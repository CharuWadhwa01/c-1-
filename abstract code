#include <iostream>
using namespace std;
// Abstract base class
class Shape {
public:
 virtual void draw() const = 0; // Pure virtual
 virtual double area() const = 0; 
};
// Concrete derived class
class Circle : public Shape {
private:
 double radius;
public:
 Circle(double r) : radius(r) {}
 void draw() const override {
 cout << "Drawing a circle." << endl;
 }
 double area() const override {
 return 3.14 * radius * radius;
 }
};
int main() {
// Shape shape; // Error: Cannot instantiate an abstract class
 Circle circle(5.0);
 circle.draw();
 cout << "Area: " << circle.area() << endl;
 return 0;
}
